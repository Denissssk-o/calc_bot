import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "8156633539:AAGXlHOFkDWztI_Fv6OXd6N2ql5vflnlbb4"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SERVICE_FEE = 2000  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
PRICE, BOX = range(2)

# –ö–æ—Ä–æ–±–∫–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
BOX_TYPES = {
    "MINI (—Ñ—É—Ç–±–æ–ª–∫–∞, —Å—É–º–∫–∞, —Ä–µ–º–µ–Ω—å, –Ω–æ—Å–∫–∏)": {
        "size": "23√ó17√ó13 —Å–º",
        "delivery_price": 1200,
        "short": "MINI"
    },
    "SMALL (–ø–∞—Ä–∞ –æ–±—É–≤–∏ –≤ –∫–æ—Ä–æ–±–∫–µ)": {
        "size": "36√ó26√ó14 —Å–º",
        "delivery_price": 2000,
        "short": "SMALL"
    },
    "LARGE (–ø–∞—Ä–∞ –æ–±—É–≤–∏ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—â–µ–π)": {
        "size": "40√ó29√ó16 —Å–º",
        "delivery_price": 2900,
        "short": "LARGE"
    },
    "XXL (–¥–≤–µ –ø–∞—Ä—ã –æ–±—É–≤–∏ –∏ –≤–µ—â–∏)": {
        "size": "37√ó29√ó28 —Å–º",
        "delivery_price": 4000,
        "short": "XXL"
    }
}

def get_box_keyboard():
    return ReplyKeyboardMarkup(
        [[box_type] for box_type in BOX_TYPES.keys()],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
    return f"{int(price):,} ‚ÇΩ".replace(",", " ")

async def get_cny_rate() -> float:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —é–∞–Ω—è –æ—Ç –¶–ë –†–§"""
    try:
        response = requests.get(CBR_API_URL, timeout=5)
        response.raise_for_status()
        data = response.json()
        cny_rate = data['Valute']['CNY']['Value'] / data['Valute']['CNY']['Nominal']
        return round(cny_rate, 2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        return 12.5  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
    try:
        context.user_data.clear()
        await update.message.reply_text(
            "üëü –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (CNY):\n"
            "–ü—Ä–∏–º–µ—Ä: 1500",
            reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True)
        )
        return PRICE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return ConversationHandler.END

async def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã"""
    try:
        text = update.message.text.strip()
        
        if text == "/cancel":
            return await cancel(update, context)
            
        try:
            price = float(text.replace(",", "."))
            if price <= 0:
                raise ValueError
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)")
            return PRICE
            
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        cny_rate = await get_cny_rate()
        context.user_data.update({
            'price': price,
            'cny_rate': cny_rate
        })
        
        await update.message.reply_text(
            f"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É (–∫—É—Ä—Å: 1 CNY = {cny_rate} RUB):",
            reply_markup=get_box_keyboard()
        )
        return BOX
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_price: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return ConversationHandler.END

async def handle_box(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—Ä–æ–±–∫–∏"""
    try:
        text = update.message.text.strip()
        
        if text == "/cancel":
            return await cancel(update, context)
            
        if text not in BOX_TYPES:
            await update.message.reply_text(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=get_box_keyboard()
            )
            return BOX
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        box_data = BOX_TYPES[text]
        price_cny = context.user_data['price']
        cny_rate = context.user_data['cny_rate']
        
        # –†–∞—Å—á–µ—Ç
        price_rub = price_cny * cny_rate
        delivery_price = box_data['delivery_price']
        total = price_rub + delivery_price + SERVICE_FEE
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = (
            f"üìä *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç*\n\n"
            f"üì¶ {text}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {box_data['size']}\n"
            f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: {format_price(delivery_price)}\n\n"
            f"üíµ –¢–æ–≤–∞—Ä: {format_price(price_rub)}\n"
            f"(–¶–µ–Ω–∞: {price_cny} CNY √ó –ö—É—Ä—Å: {cny_rate} RUB)\n\n"
            f"üíº –ö–æ–º–∏—Å—Å–∏—è: {format_price(SERVICE_FEE)}\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üí≥ *–ò—Ç–æ–≥–æ: {format_price(total)}*"
        )
        
        await update.message.reply_text(
            result,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
        )
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_box: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞! /start")
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ /start",
        reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    )
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price)],
            BOX: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_box)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('cancel', cancel))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()