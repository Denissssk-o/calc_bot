import logging
import os
import httpx
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
APP_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/")

SERVICE_FEE = 2000
CBR_API_URL = "https://www.cbr-xml-daily.ru/daily_json.js"
PRICE, BOX = range(2)

BOX_TYPES = {
    "MINI (—Ñ—É—Ç–±–æ–ª–∫–∞, —Å—É–º–∫–∞, —Ä–µ–º–µ–Ω—å, –Ω–æ—Å–∫–∏)": {"size": "23√ó17√ó13 —Å–º", "delivery_price": 1200},
    "SMALL (–ø–∞—Ä–∞ –æ–±—É–≤–∏ –≤ –∫–æ—Ä–æ–±–∫–µ)": {"size": "36√ó26√ó14 —Å–º", "delivery_price": 2000},
    "LARGE (–ø–∞—Ä–∞ –æ–±—É–≤–∏ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—â–µ–π)": {"size": "40√ó29√ó16 —Å–º", "delivery_price": 2900},
    "XXL (–¥–≤–µ –ø–∞—Ä—ã –æ–±—É–≤–∏ –∏ –≤–µ—â–∏)": {"size": "37√ó29√ó28 —Å–º", "delivery_price": 4000},
}

def get_box_keyboard():
    return ReplyKeyboardMarkup([[k] for k in BOX_TYPES.keys()], resize_keyboard=True, one_time_keyboard=True)

def format_price(price: float) -> str:
    return f"{int(price):,} ‚ÇΩ".replace(",", " ")

async def get_cny_rate() -> float:
    try:
        async with httpx.AsyncClient(timeout=5) as client:
            resp = await client.get(CBR_API_URL)
            resp.raise_for_status()
            data = resp.json()
            val = data["Valute"]["CNY"]
            return round(val["Value"] / val["Nominal"], 2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        return 12.5

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "üëü –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (CNY):\n–ü—Ä–∏–º–µ—Ä: 1500",
        reply_markup=ReplyKeyboardMarkup([["/cancel"]], resize_keyboard=True),
    )
    return PRICE

async def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "/cancel":
        return await cancel(update, context)
    try:
        price = float(text.replace(",", "."))
        if price <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)")
        return PRICE

    cny_rate = await get_cny_rate()
    context.user_data.update({"price": price, "cny_rate": cny_rate})

    await update.message.reply_text(
        f"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É (–∫—É—Ä—Å: 1 CNY = {cny_rate} RUB):",
        reply_markup=get_box_keyboard(),
    )
    return BOX

async def handle_box(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    if text == "/cancel":
        return await cancel(update, context)
    if text not in BOX_TYPES:
        await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=get_box_keyboard())
        return BOX

    box = BOX_TYPES[text]
    price_cny = context.user_data["price"]
    cny_rate = context.user_data["cny_rate"]
    price_rub = price_cny * cny_rate
    delivery_price = box["delivery_price"]
    total = price_rub + delivery_price + SERVICE_FEE

    result = (
        f"üìä *–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç*\n\n"
        f"üì¶ {text}\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä: {box['size']}\n"
        f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: {format_price(delivery_price)}\n\n"
        f"üíµ –¢–æ–≤–∞—Ä: {format_price(price_rub)}\n"
        f"(–¶–µ–Ω–∞: {price_cny} CNY √ó –ö—É—Ä—Å: {cny_rate} RUB)\n\n"
        f"üíº –ö–æ–º–∏—Å—Å–∏—è: {format_price(SERVICE_FEE)}\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"üí≥ *–ò—Ç–æ–≥–æ: {format_price(total)}*"
    )
    await update.message.reply_text(result, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True))
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ /start", reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    )
    return ConversationHandler.END

async def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price)],
            BOX: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_box)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    webhook_path = f"/webhook/{TOKEN}"
    webhook_url = f"{APP_URL}{webhook_path}"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
    await app.bot.set_webhook(webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", "8443")),
        webhook_path=webhook_path,
        webhook_url=webhook_url,
    )

if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
